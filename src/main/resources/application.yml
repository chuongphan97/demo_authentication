spring:
  datasource:
#    url: jdbc:mysql://localhost:3306/demo_authentication
#    username: root
#    password: 2110
    url: jdbc:postgresql://ec2-44-193-188-118.compute-1.amazonaws.com:5432/dccarf8memp79g
    username: mndsxltlxgbgwv
    password: 70cedc7315ba54f788345a01d71ecb6aef448c904a023636a9cb893f8628bfab
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect:  org.hibernate.dialect.PostgreSQLDialect
#        dialect: org.hibernate.dialect.MySQL5Dialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 174735107485-frahlk2alhn5udh4qiaemb8gf6ip3j9j.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
#          facebook:
#            clientId: 121189305185277
#            clientSecret: 42ffe5aa7379e8326387e0fe16f34132
#            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}" # Note that facebook now mandates the use of https redirect URIs, so make sure your app supports https in production
#            scope:
#              - email
#              - public_profile
#        provider:
#          facebook:
#            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
#            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
#            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  jwtSecret: 9a02115a835ee03d5fb83cd8a468ea33e4090aaaec87f53c9fa54512bbef4db8dc656c82a315fa0c785c08b0134716b81ddcd0153d2a7556f2e154912cf5675f
  jwtExpirationInMs: 604800000
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:4200 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
#      - myandroidapp://oauth2/redirect
#      - myiosapp://oauth2/redirect
